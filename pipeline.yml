---

resource_types:
- name: artifactory 
  type: docker-image
  source:
    repository: pivotalservices/artifactory-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

- name: sonar-runner
  type: docker-image
  source:
    repository: cathive/concourse-sonarqube-resource
- name: gcp 
  type: docker-image
  source:
    repository: google/cloud-sdk   
 
resources:
- name: myapp
  type: git
  source:
    uri: https://github.com/dhaneshande/cicdwithPCFandGCP.git
    branch: master


- name: cf-env
  type: cf
  source:
    api: {{pws-api}}
    username: {{pws-username}}
    password: {{pws-password}}
    organization: {{pws-organization}}
    space: {{pws-space}}
    skip_cert_check: true
 
#- name: gcp-env
  #type: gcp
  #source:
    #ACCOUNT: {{ACCOUNT}}
    #PROJECT_ID: {{PROJECT_ID}}
    #KEY_ID_GCP: {{KEY_ID_GCP}}
    #KEY_GCP: {{KEY_GCP}}
    #CLIENT_EMAIL: {{CLIENT_EMAIL}}
    #CLIENT_ID: {{CLIENT_ID}}
    #CLIENT_CERT_URL: {{CLIENT_CERT_URL}}
    #skip_cert_check: true 
- name: uaa-build
  type: artifactory
  source:
    endpoint: {{artifactory-endpoint}}
    repository: {{artifactory-repo}}
    regex: {{artifactory-regex}}
    username: {{artifactory-username}}
    password: {{artifactory-password}}
    skip_ssl_verification: true

- name: slack
  type: slack-notification
  source:
    url: https://hooks.slack.com/services/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

- name: myappversion
  type: git
  source:
    uri: git@gist.github.com:4ff9c5c105d16c21ad22d38df540688f.git
    branch: master
    private_key: |
      -----BEGIN RSA PRIVATE KEY-----
      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
      -----END RSA PRIVATE KEY-----

jobs:
 
- name: Versioning Job
  serial: true
  disable_manual_trigger: false   
  plan:
  - get: myapp
    trigger: true
  - get: myappversion
    #trigger: true
  - task: build
    config:
      platform: linux
      inputs:
      - name: myapp
      outputs:
      - name: some-files
      image_resource:
        type: docker-image
        source: { repository: node, tag: "latest" }
      run:
        path: sh
        args:
        - -exc
        - |
          git clone myapp some-files
          cd some-files
          ls -la
          #npm pack
          PACKAGE_VERSION=$(cat package.json \
          | grep version \
          | head -1 \
          | awk -F: '{ print $2 }' \
          | sed 's/[",]//g' \
          | tr -d '[[:space:]]')
          echo "current package version:${PACKAGE_VERSION}"
          #cd ..
          ls -la
          touch version
          chmod 777 version
          #echo "$PACKAGE_VERSION" > "$test.txt" 
          #echo "$PACKAGE_VERSION" > version	  
          #cp -r .txt some-files/
          #chmod 777 some-files/.txt
          #chmod 777 some-files/version
          #cat some-files/version
          #cd some-files
          ls -la
          echo $(date) > version
          git config --global user.email "dande@miraclesoft.com"
          git config --global user.name "dhaneshande"
          git add version
          git commit -m "Bumped release"
          #git push origin master
  - put: myappversion
    params: {repository: some-files}
    on_success:
      put: slack
      params:
        channel: "#general"
        username: dhanesh
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        text:  versioning successfully Done
    on_failure:
      put: slack
      params:
        channel: "#general"
        username: dhanesh
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        text:  versioning job got Failed			
- name: Build Unit Tests And Upload to JFrog Artifactory 
  serial: true
  disable_manual_trigger: false    
  plan:
  - get: myapp
    passed:
      - Versioning Job
    trigger: true
  #- get: myappversion
    #passed:
      #- Versioning Job
    #trigger: true
  - task: build
    config:
      platform: linux
      inputs:
      - name: myapp
      outputs:
      - name: uaa_war
      image_resource:
        type: docker-image
        source: { repository: node, tag: "6" }
      run:
        path: sh
        args:
        - -exc
        - |
          export TERM=dumb
          cd myapp
          npm install
          npm run test
          npm run test:coverage
          npm run test:report
          npm pack
          ls -la
          mv ./myapp-0.0.0.tgz ../uaa_war
          ls -la
  - put: uaa-build
    params:
      file: uaa_war/myapp-*.tgz
    on_success:
      put: slack
      params:
        channel: "#general"
        username: dhanesh
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        text:  Building of Node.js app and unit tests is successfull and storing of the build artifacts to Artifactory is successfull!
    on_failure:
      put: slack
      params:
        channel: "#general"
        username: dhanesh
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        text:  Building of Node.js app unit tests Failed and storing of the build artifacts to Artifactory Failed!
- name: SonarScan
  serial: true   
  plan:
  - get: myapp
    passed:
      - Build Unit Tests And Upload to JFrog Artifactory
    trigger: true
  - task: build
    config:
      platform: linux
      inputs:
      - name: myapp
      outputs:
      - name: sss
      image_resource:
        type: docker-image
        source: { repository: cathive/concourse-sonarqube-resource, tag: "latest" }
      run:
        path: sh
        args:
        - -exc
        - |
          cd myapp
          sonar-scanner
          ls -la
  
    on_success:
      put: slack
      params:
        channel: "#general"
        username: dhanesh
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        text:  Posting results in sonar scan is successfully Done
    on_failure:
      put: slack
      params:
        channel: "#general"
        username: dhanesh
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        text:  Posting results in sonar scan got Failed		
- name: deploy to pws
  serial: true
  plan:
  - get: uaa-build 
    trigger: true
  - get: myapp
    passed:
      - SonarScan
    trigger: true
  - task: retrieve
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: tutum/curl
          tag: "latest"
      inputs:
      - name: uaa-build
      outputs:
      - name: uaaa
      run:
        path: sh
        args:
        - -exc
        - |
          export TERM=dumb
          ls -la
          ls -la uaa-build
          chmod -R 777 uaa-build
          ls -la
          cd uaa-build
          #tar -xvzf myapp-0.0.0.tgz
          #ls -la
          #chmod -R 777 package
          #cd package
          ls -la
    
  - put: cf-env
    params:
      manifest: myapp/manifest.yml
      path: myapp
    on_success:
      put: slack
      params:
        channel: "#general"
        username: dhanesh
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        text:  PWS Deployment Success!
    on_failure:
      put: slack
      params:
        channel: "#general"
        username: dhanesh
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        text:  PWS Deployment Failed!
- name: deploy to GCP
  serial: true
  plan:
  - get: uaa-build 
    trigger: true
  - get: myapp
    passed:
      - SonarScan
    trigger: true
  - task: retrieve
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: google/cloud-sdk
          tag: "latest"
      inputs:
      - name: myapp
      outputs:
      - name: uaaag
      run:
        path: sh
        args:
        - -exc
        - |
          export TERM=dumb
          ls -la
          chmod 744 myapp
          cd myapp
          ls -la
          chmod 744 keyfile-create.sh
          ./keyfile-create.sh
          cat keyfile.json
          gcloud auth activate-service-account --key-file=keyfile.json
          gcloud config set account ${ACCOUNT}
          gcloud config set project ${PROJECT_ID}
          gcloud config set compute/region us-east1
          gcloud config set compute/zone us-east1-b
          gcloud config list
          yes y | gcloud app deploy 
    params:
      ACCOUNT: {{ACCOUNT}}
      PROJECT_ID: {{PROJECT_ID}}
      KEY_ID_GCP: {{KEY_ID_GCP}}
      KEY_GCP: {{KEY_GCP}}
      CLIENT_EMAIL: {{CLIENT_EMAIL}}
      CLIENT_ID: {{CLIENT_ID}}
      CLIENT_CERT_URL: {{CLIENT_CERT_URL}} 
    on_success:
      put: slack
      params:
        channel: "#general"
        username: dhanesh
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        text:  GCP Deployment Success!
    on_failure:
      put: slack
      params:
        channel: "#general"
        username: dhanesh
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        text:  GCP Deployment Failed!
