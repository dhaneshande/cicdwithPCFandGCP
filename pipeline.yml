---

resource_types:
- name: artifactory 
  type: docker-image
  source:
    repository: pivotalservices/artifactory-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

- name: sonar-runner
  type: docker-image
  source:
    repository: cathive/concourse-sonarqube-resource
- name: gcp 
  type: docker-image
  source:
    repository: google/cloud-sdk   
 
resources:
- name: myapp
  type: git
  source:
    uri: https://github.com/dhaneshande/cicdwithPCFandGCP.git
    branch: master


- name: cf-env
  type: cf
  source:
    api: {{pws-api}}
    username: {{pws-username}}
    password: {{pws-password}}
    organization: {{pws-organization}}
    space: {{pws-space}}
    skip_cert_check: true
 
#- name: gcp-env
  #type: gcp
  #source:
    #ACCOUNT: {{ACCOUNT}}
    #PROJECT_ID: {{PROJECT_ID}}
    #KEY_ID_GCP: {{KEY_ID_GCP}}
    #KEY_GCP: {{KEY_GCP}}
    #CLIENT_EMAIL: {{CLIENT_EMAIL}}
    #CLIENT_ID: {{CLIENT_ID}}
    #CLIENT_CERT_URL: {{CLIENT_CERT_URL}}
    #skip_cert_check: true 
- name: uaa-build
  type: artifactory
  source:
    endpoint: {{artifactory-endpoint}}
    repository: {{artifactory-repo}}
    regex: {{artifactory-regex}}
    username: {{artifactory-username}}
    password: {{artifactory-password}}
    skip_ssl_verification: true

- name: slack
  type: slack-notification
  source:
    url: https://hooks.slack.com/services/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

- name: myappversion
  type: git
  source:
    uri: git@gist.github.com:4ff9c5c105d16c21ad22d38df540688f.git
    branch: master
    private_key: |
      -----BEGIN RSA PRIVATE KEY-----
      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
      -----END RSA PRIVATE KEY-----	

jobs:
 
- name: Versioning Job
  serial: true
  disable_manual_trigger: false   
  plan:
  - get: myapp
    trigger: true
  - get: myappversion
    #trigger: true
  - task: build
    config:
      platform: linux
      inputs:
      - name: myapp
      outputs:
      - name: some-files
      image_resource:
        type: docker-image
        source: { repository: node, tag: "latest" }
      run:
        path: sh
        args:
        - -exc
        - |
          git clone myapp some-files
          cd some-files
          ls -la
          #npm pack
          PACKAGE_VERSION=$(cat package.json \
          | grep version \
          | head -1 \
          | awk -F: '{ print $2 }' \
          | sed 's/[",]//g' \
          | tr -d '[[:space:]]')
          echo "current package version:${PACKAGE_VERSION}"
          cd ..
          ls -la
          touch test.txt
          chmod 777 test.txt
          #echo "$PACKAGE_VERSION" > "$test.txt" 
          echo "$PACKAGE_VERSION" > version	  
          #cp -r .txt some-files/
          #chmod 777 some-files/.txt
          #chmod 777 some-files/version
          cat some-files/version
          cd some-files
          ls -la
          git config --global user.email "dande@miraclesoft.com"
          git config --global user.name "dhaneshande"
          git add .
          git commit -m "Bumped release"
          git push origin master
  - put: myappversion
    params: {repository: some-files}
    on_success:
      put: slack
      params:
        channel: "#general"
        username: dhanesh
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        text:  versioning successfully Done
    on_failure:
      put: slack
      params:
        channel: "#general"
        username: dhanesh
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        text:  versioning job got Failed			
- name: Build Unit Tests And Upload to JFrog Artifactory 
  serial: true
  disable_manual_trigger: false    
  plan:
  - get: myapp
    passed:
      - Versioning Job
    trigger: true
  #- get: myappversion
    #passed:
      #- Versioning Job
    #trigger: true
  - task: build
    config:
      platform: linux
      inputs:
      - name: myapp
      outputs:
      - name: uaa_war
      image_resource:
        type: docker-image
        source: { repository: node, tag: "6" }
      run:
        path: sh
        args:
        - -exc
        - |
          export TERM=dumb
          cd myapp
          npm install
          npm run test
          npm run test:coverage
          npm run test:report
          npm pack
          ls -la
          mv ./myapp-0.0.0.tgz ../uaa_war
          ls -la
  - put: uaa-build
    params:
      file: uaa_war/myapp-*.tgz
    on_success:
      put: slack
      params:
        channel: "#general"
        username: dhanesh
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        text:  Building of Node.js app and unit tests is successfull and storing of the build artifacts to Artifactory is successfull!
    on_failure:
      put: slack
      params:
        channel: "#general"
        username: dhanesh
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        text:  Building of Node.js app unit tests Failed and storing of the build artifacts to Artifactory Failed!
- name: SonarScan
  serial: true   
  plan:
  - get: myapp
    passed:
      - Build Unit Tests And Upload to JFrog Artifactory
    trigger: true
  - task: build
    config:
      platform: linux
      inputs:
      - name: myapp
      outputs:
      - name: sss
      image_resource:
        type: docker-image
        source: { repository: cathive/concourse-sonarqube-resource, tag: "latest" }
      run:
        path: sh
        args:
        - -exc
        - |
          cd myapp
          sonar-scanner
          ls -la
  
    on_success:
      put: slack
      params:
        channel: "#general"
        username: dhanesh
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        text:  Posting results in sonar scan is successfully Done
    on_failure:
      put: slack
      params:
        channel: "#general"
        username: dhanesh
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        text:  Posting results in sonar scan got Failed		
- name: deploy to pws
  serial: true
  plan:
  - get: uaa-build 
    trigger: true
  - get: myapp
    passed:
      - SonarScan
    trigger: true
  - task: retrieve
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: tutum/curl
          tag: "latest"
      inputs:
      - name: uaa-build
      outputs:
      - name: uaaa
      run:
        path: sh
        args:
        - -exc
        - |
          export TERM=dumb
          ls -la
          ls -la uaa-build
          chmod -R 777 uaa-build
          ls -la
          cd uaa-build
          #tar -xvzf myapp-0.0.0.tgz
          ls -la
          chmod -R 777 package
          cd package
          ls -la
    
  - put: cf-env
    params:
      manifest: myapp/manifest.yml
      path: myapp
    on_success:
      put: slack
      params:
        channel: "#general"
        username: dhanesh
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        text:  PWS Deployment Success!
    on_failure:
      put: slack
      params:
        channel: "#general"
        username: dhanesh
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        text:  PWS Deployment Failed!
- name: deploy to GCP
  serial: true
  plan:
  - get: uaa-build 
    trigger: true
  - get: myapp
    passed:
      - SonarScan
    trigger: true
  - task: retrieve
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: google/cloud-sdk
          tag: "latest"
      inputs:
      - name: myapp
      outputs:
      - name: uaaag
      run:
        path: sh
        args:
        - -exc
        - |
          export TERM=dumb
          ls -la
          chmod 744 myapp
          cd myapp
          ls -la
          chmod 744 keyfile-create.sh
          ./keyfile-create.sh
          cat keyfile.json
          gcloud auth activate-service-account --key-file=keyfile.json
          gcloud config set account ${ACCOUNT}
          gcloud config set project ${PROJECT_ID}
          gcloud config set compute/region us-east1
          gcloud config set compute/zone us-east1-b
          gcloud config list
          yes y | gcloud app deploy 
    params:
      ACCOUNT: {{ACCOUNT}}
      PROJECT_ID: {{PROJECT_ID}}
      KEY_ID_GCP: {{KEY_ID_GCP}}
      KEY_GCP: {{KEY_GCP}}
      CLIENT_EMAIL: {{CLIENT_EMAIL}}
      CLIENT_ID: {{CLIENT_ID}}
      CLIENT_CERT_URL: {{CLIENT_CERT_URL}} 
    on_success:
      put: slack
      params:
        channel: "#general"
        username: dhanesh
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        text:  GCP Deployment Success!
    on_failure:
      put: slack
      params:
        channel: "#general"
        username: dhanesh
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        text:  GCP Deployment Failed!
